1. OK hom nay se noi ve virtual function


// CPP program to illustrate 
// concept of Virtual Functions 
  
#include <iostream> 
using namespace std; 
  
class base { 
public: 
    virtual void print() 
    { 
        cout << "print base class" << endl; 
    } 
  
    void show() 
    { 
        cout << "show base class" << endl; 
    } 
}; 
  
class derived : public base { 
public: 
    void print() 
    { 
        cout << "print derived class" << endl; 
    } 
  
    void show() 
    { 
        cout << "show derived class" << endl; 
    } 
}; 
  
int main() 
{ 
    base* bptr; 
    derived d; 
    bptr = &d; 
  
    // virtual function, binded at runtime 
    bptr->print(); 
  
    // Non-virtual function, binded at compile time 
    bptr->show(); 
}

thang Derived ke thua Base, override lai thang print, nen cau lenh bptr->print() se hien thi ham print cua derived, co che dang sau

1. Neu no goi bptr->show() thi khong can dung den vpointer, no cal truc tiep trong assembly luon. Nen suy ra neu class base khong co virtual Func nao thi trong cau truc cua object derived d khong co vpointer
2. Trong cau lenh bptr->print() thi no goi print() cua derived, dau tien no tim den vpointer cua object derived d, xong tham chieu den vtable. vtable se nam o trong data segment, dc tao ra trong compile time. vtable chi chua nhung ham virtual

thuong thi cau truc cua 1 object la vpointer roi moi den cac thuoc tinh
